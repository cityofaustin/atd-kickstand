{"version":3,"file":"index.js","sources":["../src/graphql/GQLAbstract.js","../src/components/Hi.js","../src/index.js"],"sourcesContent":["import { gql } from \"apollo-boost\";\n\nclass GQLAbstract {\n  /**\n   * Primes the internal configuration for rendering.\n   *\n   * @constructor\n   * @param {Object} The initial configuration of the abstract\n   */\n  constructor(initConfig) {\n    this.config = initConfig;\n    this.configInit = JSON.parse(JSON.stringify(initConfig));\n    this.config.filterStack = {\n      where: [],\n      order_by: [],\n    };\n  }\n\n  /**\n   * Returns a safe string copy with the basic GraphQL abstract.\n   * @returns {string}\n   */\n  get abstractStructure() {\n    return `{\n      gqlAbstractTableName (\n          gqlAbstractFilters\n      ) {\n          gqlAbstractColumns\n      },\n      gqlAbstractTableAggregateName (\n          gqlAbstractAggregateFilters\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }`;\n  }\n\n  /**\n   * Returns false if the input string is a valid alphanumeric object key\n   * @param {string} input - The string to be tested\n   * @returns {boolean}\n   */\n  isNestedKey(input) {\n    return input.match(/^[0-9a-zA-Z\\-_]+$/) === null;\n  }\n\n  /**\n   * Returns the key for a nested expression\n   * @param {string} exp - The GraphQL expression\n   * @returns {string}\n   */\n  getExpKey = (exp) => exp.split(/[{} ]+/, 1)[0].trim();\n\n  /**\n   * Returns the value of a nested expression, usually another expression.\n   * @param {string} exp - The GraphQL expression\n   * @returns {string}\n   */\n  getExpValue = (exp) =>\n    exp.substring(exp.indexOf(\"{\") + 1, exp.lastIndexOf(\"}\")).trim();\n\n  /**\n   * Refactors a nested key into `sort` format\n   * @param {string} exp - The nested key (usually a graphql expression)\n   * @returns {string}\n   */\n  sortifyNestedKey = (exp, val) =>\n    this.isNestedKey(exp)\n      ? `${this.getExpKey(exp)}: { ${this.sortifyNestedKey(\n          this.getExpValue(exp),\n          val\n        )} }`\n      : `${exp}: ${val}`;\n\n  /**\n   * Returns the name of the table\n   * @returns {string}\n   */\n  get table() {\n    return this.config.table;\n  }\n\n  /**\n   * Sets the name of the table for the abstract\n   * @returns {string}\n   */\n  set table(val) {\n    this.config.table = val;\n  }\n\n  /**\n   * Sets the limit of the current query\n   * @param {integer} limit - the number you want to use for a limit\n   */\n  set limit(limit) {\n    this.config.limit = limit;\n  }\n\n  /**\n   * Returns the current limit of the current configuration\n   * @returns {integer}\n   */\n  get limit() {\n    return this.config.limit;\n  }\n\n  /**\n   * Sets the offset of the current configuration\n   * @param {integer} offset - the number you want to use as offset\n   */\n  set offset(offset) {\n    this.config.offset = offset;\n  }\n\n  /**\n   * Returns the offset of the current configuration\n   * @returns {integer}\n   */\n  get offset() {\n    return this.config.offset;\n  }\n\n  /**\n   * Returns an array of searchable columns\n   * @returns {Array}\n   */\n  get searchableFields() {\n    const columns = [];\n    for (const [key, value] of this.getEntries(\"columns\")) {\n      if (value.searchable) columns.push(key);\n    }\n    return columns;\n  }\n\n  /**\n   * Resets the value of where and or to empty\n   */\n  cleanWhere() {\n    this.config.where = null;\n    this.config.or = null;\n  }\n\n  /**\n   * Removes all conditions that will be used for ordering.\n   */\n  clearOrderBy() {\n    this.config.order_by = [];\n  }\n\n  /**\n   * Resets original conditions used for ordering\n   */\n  resetOrderBy() {\n    this.config.order_by = this.configInit.order_by;\n  }\n\n  /**\n   * Full reset of all conditions\n   */\n  resetFull() {\n    this.config = JSON.parse(JSON.stringify(this.configInit));\n  }\n\n  /**\n   * Replaces or creates a 'where' condition in graphql syntax.\n   * @param {string} key - The name of the column\n   * @param {string} syntax - the graphql syntax for the where condition\n   */\n  setWhere(key, syntax) {\n    if (!this.config.where) this.config.where = {};\n    this.config.where[key] = syntax;\n  }\n\n  /**\n   * Replaces or creates an 'or' condition in graphql syntax.\n   * @param {string} key - The name of the column\n   * @param {string} syntax - the graphql syntax for the where condition\n   */\n  setOr(key, syntax) {\n    if (!this.config.or) this.config.or = {};\n    this.config.or[key[0]] = syntax[0];\n  }\n\n  /**\n   * Removes a column from the where condition\n   * @param {string} key - The name of the column\n   */\n  deleteWhere(key) {\n    delete this.config.where[key];\n  }\n\n  /**\n   * Removes a column from the or condition\n   * @param {object} orObject - The object to be deleted\n   */\n  deleteOr(orObject) {\n    const keyToDelete = Object.keys(orObject)[0];\n    this.config.or && delete this.config.or[keyToDelete];\n  }\n\n  /**\n   * Replaces or creates an 'order_by' condition in graphql syntax.\n   * @param {string} key - The name of the column\n   * @param {string} syntax - either 'asc' or 'desc'\n   */\n  setOrder(key, syntax) {\n    if (this.config && this.config.order_by) {\n      // First, RESET the order_by value.\n      // - Our assumption is that there should only by 1 order_by at a time.\n      this.config.order_by = {};\n      // Now, set new key, syntax pair for order_by\n      this.config.order_by[key] = syntax;\n    } else {\n      this.config.order_by = {};\n      this.config.order_by[key] = syntax;\n    }\n  }\n\n  /**\n   * Returns true if a column is defined as sortable in the config, assumes false if not found.\n   * @param {string} columnName - The name of the column in the config\n   * @returns {boolean}\n   */\n  isSortable(columnName) {\n    return this.config.columns[columnName].sortable || false;\n  }\n\n  /**\n   * Returns true if a column is defined as hidden in the config, assumes false if not found.\n   * @param {string} columnName - The name of the column in the config\n   * @returns {boolean}\n   */\n  isHidden(columnName) {\n    return this.config.columns[columnName].hidden || false;\n  }\n\n  /**\n   * Returns true if a column is defined as searchable in the config, assumes false if not found.\n   * @param {string} columnName - The name of the column in the config\n   * @returns {boolean}\n   */\n  isSearchable(columnName) {\n    return this.config.columns[columnName].searchable || false;\n  }\n\n  /**\n   * Returns true if a column is defined as primary key in the config, assumes false if not found.\n   * @param {string} columnName - The name of the column in the config\n   * @returns {boolean}\n   */\n  isPK(columnName) {\n    return this.config.columns[columnName].primary_key || false;\n  }\n\n  /**\n   * Returns the type of a column as defined in the config, assumes string if not found.\n   * @param {string} columnName - The name of the column in the config\n   * @returns {string}\n   */\n  getType(columnName) {\n    return (this.config.columns[columnName].type || \"string\").toLowerCase();\n  }\n\n  /**\n   * Returns true if the column contains a filter\n   * @param {string} columnName - The name of the column in the config\n   * @return {boolean}\n   */\n  hasFilter(columnName) {\n    return !!this.config.columns[columnName].filter;\n  }\n\n  /**\n   * Returns the default value when value is null\n   * @param {string} columnName - The name of the column in the config\n   * @returns {string}\n   */\n  getDefault(columnName) {\n    return this.config.columns[columnName].default;\n  }\n\n  /**\n   * Attempts to format value based on configuration specification `format`\n   * @param {string} columnName - The column to read the configuration from\n   * @param {object} value - The actual value to be presented to the component\n   */\n  getFormattedValue(columnName, value) {\n    const type = this.getType(columnName);\n\n    if (value === null) {\n      return \"-\";\n    } else {\n      value = String(value);\n    }\n\n    if (this.hasFilter(columnName)) {\n      return this.config.columns[columnName].filter(value);\n    }\n\n    switch (type) {\n      case \"string\": {\n        if (typeof value === \"object\") return JSON.stringify(value);\n        else return `${value}`;\n      }\n      case \"date_iso\": {\n        let dateValue = \"\";\n        try {\n          dateValue = new Date(Date.parse(value)).toLocaleString();\n        } catch {\n          dateValue = \"n/a\";\n        }\n        return `${dateValue}`;\n      }\n      case \"currency\": {\n        return `$${value.toLocaleString()}`;\n      }\n      case \"boolean\": {\n        return value ? \"True\" : \"False\";\n      }\n      // Integers, Decimals\n      default: {\n        return `${value}`;\n      }\n    }\n  }\n\n  /**\n   * Returns the label for a column as specified in the config, either a 'table' label or 'search' label.\n   * Returns null if the label is not found. Assumes type as 'table'.\n   * @param {string} columnName - The name of the column.\n   * @param {string} type - Type type: 'table' or 'search'\n   * @returns {string|null}\n   */\n  getLabel(columnName, type = \"table\") {\n    return this.config.columns[columnName][\"label_\" + type] || null;\n  }\n\n  /**\n   * Returns an array with key-value pairs\n   * @param {string} section - the 'key' name of the section in the config object\n   * @returns {[string, any][]}\n   */\n  getEntries(section) {\n    return Object.entries(this.config[section] || section);\n  }\n\n  /**\n   * Returns an array of strings containing the names of the columns in the current state of config\n   * @returns {Array}\n   */\n  get columns() {\n    return this.getEntries(\"columns\").map((k) => k[0]);\n  }\n\n  /**\n   * Returns the url path for a single item, or null if ot does not exist.\n   * @returns {string|null}\n   */\n  get singleItem() {\n    return this.config.single_item || null;\n  }\n\n  /**\n   * Returns the showDateRange configuration value as a boolean.\n   * @return {boolean}\n   */\n  get showDateRange() {\n    return this.config.showDateRange || false;\n  }\n\n  /**\n   * Generates the filters section and injects the abstract with finished GraphQL syntax.\n   * @params {bool} aggregate - True if this is an aggregate filter\n   * @returns {string}\n   */\n  generateFilters(aggregate = false) {\n    const output = [];\n\n    // Aggregates do not need limit and offset filters\n    if (aggregate === false) {\n      if (this.config.limit) {\n        output.push(\"limit: \" + this.config.limit);\n      }\n\n      if (this.config.offset !== null) {\n        output.push(\"offset: \" + this.config.offset);\n      }\n    }\n\n    if (this.config.where !== null) {\n      const where = [];\n      const or = [];\n      for (const [key, value] of this.getEntries(\"where\")) {\n        // If we have a nested expression for a key, then append to 'or'\n        if (this.isNestedKey(key)) {\n          or.push(`{ ${key} }`);\n          // Else, append to 'where'\n        } else {\n          where.push(`${key}: {${value}}`);\n        }\n      }\n      if (this.config.or) {\n        for (const [key, value] of this.getEntries(\"or\")) {\n          or.push(`{${key}: {${value}}}`);\n        }\n      }\n      if (or.length > 0) {\n        output.push(`where: {${where.join(\", \")}, _or: [${or.join(\", \")}]}`);\n      } else {\n        output.push(`where: {${where.join(\", \")}}`);\n      }\n    }\n\n    if (this.config.order_by) {\n      const orderBy = [];\n      for (const [key, value] of this.getEntries(\"order_by\")) {\n        orderBy.push(\n          this.isNestedKey(key)\n            ? this.sortifyNestedKey(key, value)\n            : `${key}: ${value}`\n        );\n      }\n      output.push(`order_by: {${orderBy.join(\", \")}}`);\n    }\n\n    return output.join(\",\\n\");\n  }\n\n  /**\n   * Generates a list with the names of the columns in graphql syntax\n   * @returns {string}\n   */\n  generateColumns() {\n    return this.columns.join(\"\\n\");\n  }\n\n  /**\n   * Generates a series of 'where' clauses in GraphQL for each filter setting provided in the configuration\n   * and the current state of the app.\n   * @param {object} filters - The filters configuration\n   * @param {object} filtersState - The current filter's state\n   */\n  loadFilters(filters, filtersState) {\n    for (const group in filters) {\n      for (const filter of filters[group].filters) {\n        for (const filterItem of filter.filter.where) {\n          for (const [key, syntax] of this.getEntries(filterItem)) {\n            // If enabled, add to the list or remove it from the query.\n            if (filtersState[filter.id]) {\n              key === \"or\"\n                ? this.setOr(Object.keys(syntax), Object.values(syntax))\n                : this.setWhere(key, syntax);\n            } else {\n              key === \"or\" ? this.deleteOr(syntax) : this.deleteWhere(key);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Generates a GraphQL query based on the current state of the configuration.\n   * @returns {string}\n   */\n  get query() {\n    // First copy the abstract and work from the copy\n    let query = this.abstractStructure;\n\n    // Replace the name of the table\n    query = query.replace(\"gqlAbstractTableName\", this.config.table);\n    query = query.replace(\n      \"gqlAbstractTableAggregateName\",\n      this.config.table + \"_aggregate\"\n    );\n\n    // Generate Filters\n    query = query.replace(\"gqlAbstractFilters\", this.generateFilters());\n    query = query.replace(\n      \"gqlAbstractAggregateFilters\",\n      this.generateFilters(true)\n    );\n\n    // Generate Columns\n    query = query.replace(\"gqlAbstractColumns\", this.generateColumns());\n\n    // Aggregate Tables\n\n    return query;\n  }\n\n  /**\n   * Generates a GraphQL query based on columns passed in for export feature.\n   * @params {string} - String containing columns to return in query.\n   * @returns {Object} gql Object\n   */\n  queryCSV(string) {\n    // First copy the abstract and work from the copy and clear offset to request all records\n    let query = this.abstractStructure;\n    this.offset = 0;\n\n    // Replace the name of the table\n    query = query.replace(\"gqlAbstractTableName\", this.config.table);\n    query = query.replace(\n      \"gqlAbstractTableAggregateName\",\n      this.config.table + \"_aggregate\"\n    );\n\n    // Generate Filters\n    query = query.replace(\"gqlAbstractFilters\", this.generateFilters());\n    query = query.replace(\n      \"gqlAbstractAggregateFilters\",\n      this.generateFilters(true)\n    );\n\n    // Generate Columns\n    query = query.replace(\"gqlAbstractColumns\", string);\n\n    // Return GraphQL query\n    return gql`\n      ${query}\n    `;\n  }\n\n  /**\n   * Generates a GraphQL query based on queryConfigArray passed in to set aggregate filters from table filters.\n   * @params {queryConfigArray} - Array of config objects (object keys are table, columns, and key (if nested)).\n   * @params {queryInstance} - Query instance to get table filters and set in aggregate queries.\n   * @returns {Object} gql Object\n   */\n  queryAggregate(queryConfigArray, queryInstance) {\n    // Create array to store each query\n    const aggregatesQueryArray = [];\n\n    // For each config, create query, replace filters/columns, and push to aggregatesQueryArray\n    queryConfigArray.forEach((config) => {\n      let query = `\n      gqlAbstractTableAggregateName (\n          gqlAbstractAggregateFilters\n      ) {\n          aggregate {\n            gqlAggregateColumns\n          }\n        }\n      `;\n      // Replace the name of the aggregate table\n      query = query.replace(\"gqlAbstractTableAggregateName\", config.table);\n\n      // Retrieve filters from query instance and add to aggregate query\n      const whereFilters = [];\n      const orFilters = [];\n      Object.entries(queryInstance.config.where).forEach(([filter, value]) => {\n        // If we have a nested expression for a key, then append to 'or'\n        if (this.isNestedKey(filter)) {\n          orFilters.push(`{ ${filter} }`);\n          // Else, append to 'where'\n        } else {\n          whereFilters.push(`${filter}: { ${value} }`);\n        }\n      });\n\n      // Retrieve or filters from query instance\n      if (queryInstance.config.or) {\n        Object.entries(queryInstance.config.or).forEach(([filter, value]) =>\n          orFilters.push(`{${filter}: { ${value} }}`)\n        );\n      }\n\n      if (orFilters.length > 0) {\n        const orString = `_or: [ ${orFilters.join(\",\")} ]`;\n        whereFilters.push(orString);\n      }\n      // If a key is defined in config, nest whereFilters\n      query = config.key\n        ? query.replace(\n            \"gqlAbstractAggregateFilters\",\n            `where: { ${config.key}: { ${whereFilters} } }`\n          )\n        : query.replace(\n            \"gqlAbstractAggregateFilters\",\n            `where: { ${whereFilters} }`\n          );\n\n      // Generate Columns\n      query = query.replace(\"gqlAggregateColumns\", config.columns.join(\" \"));\n\n      aggregatesQueryArray.push(query);\n    });\n    // Join each aggregate query into one string\n    const aggregatesQueryString = aggregatesQueryArray.join(\" \");\n\n    // Return GraphQL query\n    return gql`query GetLocationStats {\n      ${aggregatesQueryString}\n    }`;\n  }\n\n  /**\n   * Sets the options for Apollo query methods\n   * @param {string} optionType - The method in question: useQuery, useMutation, etc.\n   * @param {object} optionsObject - A key value pair with Apollo config stipulations.\n   */\n  setOption(optionType, optionsObject) {\n    this.config.options[optionType] = optionsObject;\n  }\n\n  /**\n   * Returns an apollo query option by type\n   * @param {string} optionType - The option type name being retrieved: useQuery, useMutation, etc.\n   */\n  getOption(optionType) {\n    try {\n      return this.config.options[optionType];\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Returns a key-value object with options for the Apollo useQuery method\n   * @returns {object} - The options object\n   */\n  get useQueryOptions() {\n    return this.getOption(\"useQuery\") || {};\n  }\n\n  /**\n   * Returns a GQL object based on the current state of the configuration.\n   * @returns {Object} gql object\n   */\n  get gql() {\n    return gql`\n      ${this.query}\n    `;\n  }\n}\n\nexport default GQLAbstract;\n","import React from \"react\";\n\nexport const Hi = ({ data }) => (\n  <h1\n    style={{\n      backgroundColor: data.state === \"DARK\" ? \"black\" : \"white\",\n      color: data.state === \"DARK\" ? \"gray\" : \"black\",\n    }}\n  >\n    Hi\n  </h1>\n);\n\nHi.propTypes = {};\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\nimport GQLAbstract from \"./graphql/GQLAbstract\";\n\nimport { Hi } from \"./components/Hi\";\nexport { Hi, GQLAbstract };\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>Example Component: {text}</div>;\n};\n"],"names":["GQLAbstract","initConfig","getExpKey","exp","split","trim","getExpValue","substring","indexOf","lastIndexOf","sortifyNestedKey","val","isNestedKey","config","configInit","JSON","parse","stringify","filterStack","where","order_by","input","match","cleanWhere","or","clearOrderBy","resetOrderBy","resetFull","setWhere","key","syntax","setOr","deleteWhere","deleteOr","orObject","keyToDelete","Object","keys","setOrder","isSortable","columnName","columns","sortable","isHidden","hidden","isSearchable","searchable","isPK","primary_key","getType","type","toLowerCase","hasFilter","filter","getDefault","getFormattedValue","value","String","dateValue","Date","toLocaleString","getLabel","getEntries","section","entries","generateFilters","aggregate","output","limit","push","offset","length","join","orderBy","generateColumns","loadFilters","filters","filtersState","group","filterItem","id","values","queryCSV","string","query","abstractStructure","replace","table","gql","queryAggregate","queryConfigArray","queryInstance","aggregatesQueryArray","forEach","whereFilters","orFilters","orString","aggregatesQueryString","setOption","optionType","optionsObject","options","getOption","map","k","single_item","showDateRange","Hi","data","backgroundColor","state","color","propTypes","ExampleComponent","text","styles","test"],"mappings":"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"}